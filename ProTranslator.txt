ProTranslator/
├── src/
│   ├── api/
│   │   ├── __init__.py
│   │   └── translation_service.py
│   ├── ui/
│   │   ├── __init__.py
│   │   ├── main_window.py
│   │   ├── components/
│   │   │   ├── __init__.py
│   │   │   ├── language_selector.py
│   │   │   └── translation_panel.py
│   │   └── styles/
│   │       └── style.qss
│   └── utils/
│       ├── __init__.py
│       └── config.py
├── resources/
│   ├── icons/
│   └── fonts/
└── main.py

Code translation_service.py:

import requests
from typing import Dict, Any

class TranslationService:
    def __init__(self):
        self.api_key = "mt_LgQ936w3yLyRBVWcNiHxaDT3zndJqr78lMdmpu2DpEKwpLu"
        self.base_url = "https://api.machinetranslation.com/pv1/translate"
        
    def translate(self, text: str, source_lang: str, target_lang: str) -> Dict[str, Any]:
        headers = {
            "Authorization": f"BEARER {self.api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "text": text,
            "source_language_code": source_lang,
            "target_language_code": target_lang
        }
        
        try:
            response = requests.post(self.base_url, headers=headers, json=payload)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            raise Exception(f"Translation failed: {str(e)}")

Code language_selector.py:

from PyQt6.QtWidgets import QWidget, QVBoxLayout, QLabel, QComboBox
from PyQt6.QtCore import Qt

class LanguageSelector(QWidget):
    def __init__(self, label_text):
        super().__init__()
        self.setup_ui(label_text)
        self.load_languages()

    def setup_ui(self, label_text):
        layout = QVBoxLayout(self)
        layout.setSpacing(5)
        
        # Create and style the label
        label = QLabel(label_text)
        label.setStyleSheet("""
            QLabel {
                color: #333333;
                font-size: 14px;
                font-weight: bold;
            }
        """)
        
        # Create and style the combobox
        self.combo = QComboBox()
        self.combo.setFixedWidth(200)
        self.combo.setStyleSheet("""
            QComboBox {
                border: 2px solid #e0e0e0;
                border-radius: 5px;
                padding: 5px;
                background: white;
                min-height: 30px;
            }
            QComboBox::drop-down {
                border: none;
                padding-right: 10px;
            }
            QComboBox::down-arrow {
                image: url(resources/icons/dropdown.png);
                width: 12px;
                height: 12px;
            }
        """)
        
        layout.addWidget(label)
        layout.addWidget(self.combo)
        layout.setAlignment(Qt.AlignmentFlag.AlignTop)

    def load_languages(self):
        languages = [
            ("English", "en"),
            ("Spanish", "es"),
            ("French", "fr"),
            ("German", "de"),
            ("Chinese", "zh"),
            ("Japanese", "ja"),
            ("Korean", "ko"),
            ("Russian", "ru"),
            ("Arabic", "ar"),
            ("Hindi", "hi")
        ]
        
        for lang_name, lang_code in languages:
            self.combo.addItem(lang_name, lang_code)

Code translation_panel.py:

from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, 
                           QTextEdit, QPushButton, QTabWidget, QLabel)
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QClipboard
from ...api.translation_service import TranslationService

class TranslationPanel(QWidget):
    def __init__(self):
        super().__init__()
        self.translation_service = TranslationService()
        self.result_texts = {}  # Store text widgets for each engine
        self.setup_ui()

    def set_main_window(self, main_window):
        self.main_window = main_window

    def setup_ui(self):
        layout = QVBoxLayout(self)
        
        # Source text area
        self.source_text = QTextEdit()
        self.source_text.setPlaceholderText("Enter text to translate...")
        self.source_text.setStyleSheet("""
            QTextEdit {
                border: 2px solid #e0e0e0;
                border-radius: 5px;
                padding: 10px;
                background: white;
                font-size: 14px;
                min-height: 150px;
            }
        """)
        
        # Translate button with loading state
        self.translate_button = QPushButton("Translate")
        self.translate_button.setFixedWidth(200)
        self.translate_button.clicked.connect(self.translate_text)
        
        # Tab widget for different translation engines
        self.tab_widget = QTabWidget()
        self.setup_translation_tabs()
        
        # Add widgets to layout
        layout.addWidget(self.source_text)
        layout.addWidget(self.translate_button, alignment=Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.tab_widget)

    def setup_translation_tabs(self):
        engines = ["Google", "DeepL", "Microsoft", "ChatGPT", "Amazon"]
        
        for engine in engines:
            tab = QWidget()
            tab_layout = QVBoxLayout(tab)
            
            # Translation result area
            result_text = QTextEdit()
            result_text.setReadOnly(True)
            result_text.setStyleSheet("""
                QTextEdit {
                    border: 2px solid #e0e0e0;
                    border-radius: 5px;
                    padding: 10px;
                    background: #fafafa;
                    font-size: 14px;
                    min-height: 150px;
                }
            """)
            self.result_texts[engine] = result_text
            
            # Stats bar
            stats_layout = QHBoxLayout()
            
            # Word count label
            word_count_label = QLabel("Words: 0 | Characters: 0")
            stats_layout.addWidget(word_count_label)
            
            stats_layout.addStretch()
            
            # Action buttons
            copy_button = QPushButton("Copy")
            copy_button.clicked.connect(lambda checked, t=result_text: self.copy_translation(t))
            
            share_button = QPushButton("Share")
            share_button.clicked.connect(self.share_translation)
            
            stats_layout.addWidget(copy_button)
            stats_layout.addWidget(share_button)
            
            tab_layout.addWidget(result_text)
            tab_layout.addLayout(stats_layout)
            
            self.tab_widget.addTab(tab, engine)

    def translate_text(self):
        text = self.source_text.toPlainText()
        if not text:
            return
            
        self.translate_button.setEnabled(False)
        self.translate_button.setText("Translating...")
        
        try:
            source_lang = self.main_window.source_lang.combo.currentData()
            target_lang = self.main_window.target_lang.combo.currentData()
            
            # Get translations
            result = self.translation_service.translate(text, source_lang, target_lang)
            
            # Update each engine tab with its translation
            for translation in result['translations']:
                engine = translation['engine'].capitalize()
                if engine in self.result_texts:
                    self.result_texts[engine].setText(translation['target_text'])
                    
                    # Update word count for each tab
                    words = len(translation['target_text'].split())
                    chars = len(translation['target_text'])
                    tab_index = self.tab_widget.indexOf(self.tab_widget.findChild(QWidget, engine))
                    if tab_index != -1:
                        stats_layout = self.tab_widget.widget(tab_index).layout()
                        word_count_label = stats_layout.itemAt(0).widget()
                        word_count_label.setText(f"Words: {words} | Characters: {chars}")
                    
        except Exception as e:
            for result_text in self.result_texts.values():
                result_text.setText(f"Translation Error: {str(e)}")
        
        finally:
            self.translate_button.setEnabled(True)
            self.translate_button.setText("Translate")

    def copy_translation(self, text_widget):
        clipboard = QClipboard()
        clipboard.setText(text_widget.toPlainText())

    def share_translation(self):
        # Will implement sharing functionality later
        pass

Code main_window.py:

from PyQt6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, 
                           QHBoxLayout, QPushButton, QStackedWidget)
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QIcon, QFont

from .components.language_selector import LanguageSelector
from .components.translation_panel import TranslationPanel

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("ProTranslator")
        self.setMinimumSize(1200, 800)
        
        # Create central widget
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        
        # Create main layout
        self.main_layout = QVBoxLayout(self.central_widget)
        
        self.setup_ui()
        self.load_styles()

    def setup_ui(self):
        # Create header
        header = QWidget()
        header_layout = QHBoxLayout(header)
        header_layout.setContentsMargins(20, 10, 20, 10)
        
        # Add language selectors
        self.source_lang = LanguageSelector("From:")
        self.target_lang = LanguageSelector("To:")
        header_layout.addWidget(self.source_lang)
        header_layout.addWidget(self.target_lang)
        
        # Add translation panel and pass main window reference
        self.translation_panel = TranslationPanel()
        self.translation_panel.set_main_window(self)
        
        # Add widgets to main layout
        self.main_layout.addWidget(header)
        self.main_layout.addWidget(self.translation_panel)

    def load_styles(self):
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f5f5;
            }
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)

Code main.py:

import sys
from PyQt6.QtWidgets import QApplication
from src.ui.main_window import MainWindow

def main():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()
